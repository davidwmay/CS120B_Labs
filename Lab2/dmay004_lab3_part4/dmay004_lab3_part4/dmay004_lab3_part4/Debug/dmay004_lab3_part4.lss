
dmay004_lab3_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a15  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080a  00000000  00000000  00000c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028e  00000000  00000000  00001433  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000016c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000226  00000000  00000000  00001b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	44 c0       	rjmp	.+136    	; 0x124 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}

int main() {
    DDRA = 0x00; PORTA = 0xFF;
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
    DDRB = 0xFF; PORTB = 0xF0;
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	90 ef       	ldi	r25, 0xF0	; 240
  a8:	95 b9       	out	0x05, r25	; 5
    DDRC = 0xFF; PORTC = 0x0F;
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	8f e0       	ldi	r24, 0x0F	; 15
  ae:	88 b9       	out	0x08, r24	; 8
 */

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  b0:	60 e8       	ldi	r22, 0x80	; 128
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	58 e0       	ldi	r21, 0x08	; 8
	
    while (1) {
		
		tmpOutput = 0x00;
		
		tmp1 = PINA & 0x01;
  b6:	90 b1       	in	r25, 0x00	; 0
  b8:	91 70       	andi	r25, 0x01	; 1
		tmp2 = PINA & 0x02;
  ba:	20 b1       	in	r18, 0x00	; 0
  bc:	22 70       	andi	r18, 0x02	; 2
		tmp3 = PINA & 0x04;
  be:	30 b1       	in	r19, 0x00	; 0
  c0:	34 70       	andi	r19, 0x04	; 4
 */

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  c2:	03 99       	sbic	0x00, 3	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x2c>
  c6:	84 2f       	mov	r24, r20
  c8:	01 c0       	rjmp	.+2      	; 0xcc <main+0x2e>
  ca:	86 2f       	mov	r24, r22
  cc:	33 23       	and	r19, r19
  ce:	11 f0       	breq	.+4      	; 0xd4 <main+0x36>
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <main+0x38>
  d4:	8f 7b       	andi	r24, 0xBF	; 191
  d6:	22 23       	and	r18, r18
  d8:	11 f0       	breq	.+4      	; 0xde <main+0x40>
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <main+0x42>
  de:	8f 7d       	andi	r24, 0xDF	; 223
  e0:	99 23       	and	r25, r25
  e2:	11 f0       	breq	.+4      	; 0xe8 <main+0x4a>
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	01 c0       	rjmp	.+2      	; 0xea <main+0x4c>
  e8:	8f 7e       	andi	r24, 0xEF	; 239
		tmpOutput = SetBit(tmpOutput, 7, tmp4);
		tmpOutput = SetBit(tmpOutput, 6, tmp3);
		tmpOutput = SetBit(tmpOutput, 5, tmp2);
		tmpOutput = SetBit(tmpOutput, 4, tmp1);
		
		PORTC = tmpOutput;
  ea:	88 b9       	out	0x08, r24	; 8
		
		tmpOutput = 0x00;
		
		tmp1 = PINA & 0x10;
  ec:	90 b1       	in	r25, 0x00	; 0
  ee:	90 71       	andi	r25, 0x10	; 16
		tmp2 = PINA & 0x20;
  f0:	20 b1       	in	r18, 0x00	; 0
  f2:	20 72       	andi	r18, 0x20	; 32
		tmp3 = PINA & 0x40;
  f4:	30 b1       	in	r19, 0x00	; 0
  f6:	30 74       	andi	r19, 0x40	; 64
 */

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  f8:	07 99       	sbic	0x00, 7	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <main+0x62>
  fc:	84 2f       	mov	r24, r20
  fe:	01 c0       	rjmp	.+2      	; 0x102 <main+0x64>
 100:	85 2f       	mov	r24, r21
 102:	33 23       	and	r19, r19
 104:	11 f0       	breq	.+4      	; 0x10a <main+0x6c>
 106:	84 60       	ori	r24, 0x04	; 4
 108:	01 c0       	rjmp	.+2      	; 0x10c <main+0x6e>
 10a:	8b 7f       	andi	r24, 0xFB	; 251
 10c:	22 23       	and	r18, r18
 10e:	11 f0       	breq	.+4      	; 0x114 <main+0x76>
 110:	82 60       	ori	r24, 0x02	; 2
 112:	01 c0       	rjmp	.+2      	; 0x116 <main+0x78>
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	99 23       	and	r25, r25
 118:	11 f0       	breq	.+4      	; 0x11e <main+0x80>
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	01 c0       	rjmp	.+2      	; 0x120 <main+0x82>
 11e:	8e 7f       	andi	r24, 0xFE	; 254
		tmpOutput = SetBit(tmpOutput, 3, tmp4);
		tmpOutput = SetBit(tmpOutput, 2, tmp3);
		tmpOutput = SetBit(tmpOutput, 1, tmp2);
		tmpOutput = SetBit(tmpOutput, 0, tmp1);
		
		PORTB = tmpOutput;
 120:	85 b9       	out	0x05, r24	; 5
 122:	c9 cf       	rjmp	.-110    	; 0xb6 <main+0x18>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
