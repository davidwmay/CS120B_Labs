
dmay004_lab3_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a1  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078c  00000000  00000000  00000ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000324  00000000  00000000  0000123d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001564  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000416  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000126  00000000  00000000  0000199e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	46 c0       	rjmp	.+140    	; 0x128 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
//unsigned char GetBit(unsigned char x, unsigned char k) {
//	return ((x & (0x01 << k)) != 0);
//}

int main() {
	DDRA = 0x00; PORTA = 0xFF;
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x00; PORTB = 0xFF;
  a4:	14 b8       	out	0x04, r1	; 4
  a6:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
  a8:	87 b9       	out	0x07, r24	; 7
  aa:	18 b8       	out	0x08, r1	; 8

	
	while (1) {
		numOnes = 0x00;
		
		tmp1 = PINA & 0x01;
  ac:	80 b1       	in	r24, 0x00	; 0
		tmp2 = PINA & 0x02;
  ae:	70 b1       	in	r23, 0x00	; 0
		tmp3 = PINA & 0x04;
  b0:	60 b1       	in	r22, 0x00	; 0
  b2:	64 70       	andi	r22, 0x04	; 4
		tmp4 = PINA & 0x08;
  b4:	50 b1       	in	r21, 0x00	; 0
  b6:	58 70       	andi	r21, 0x08	; 8
		tmp5 = PINA & 0x10;
  b8:	40 b1       	in	r20, 0x00	; 0
  ba:	40 71       	andi	r20, 0x10	; 16
		tmp6 = PINA & 0x20;
  bc:	30 b1       	in	r19, 0x00	; 0
  be:	30 72       	andi	r19, 0x20	; 32
		tmp7 = PINA & 0x40;
  c0:	20 b1       	in	r18, 0x00	; 0
  c2:	20 74       	andi	r18, 0x40	; 64
		tmp8 = PINA & 0x80;
  c4:	90 b1       	in	r25, 0x00	; 0
  c6:	90 78       	andi	r25, 0x80	; 128
	unsigned char tmp8 = 0x00;
	unsigned char numOnes = 0x00;

	
	while (1) {
		numOnes = 0x00;
  c8:	81 70       	andi	r24, 0x01	; 1
		tmp8 = PINA & 0x80;
		
		if (tmp1 != 0x00) {
			numOnes = numOnes + 0x01;
		}
		if (tmp2 != 0x00) {
  ca:	71 fd       	sbrc	r23, 1
			numOnes = numOnes + 0x01;
  cc:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp3 != 0x00) {
  ce:	61 11       	cpse	r22, r1
			numOnes = numOnes + 0x01;
  d0:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp4 != 0x00) {
  d2:	51 11       	cpse	r21, r1
			numOnes = numOnes + 0x01;
  d4:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp5 != 0x00) {
  d6:	41 11       	cpse	r20, r1
			numOnes = numOnes + 0x01;
  d8:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp6 != 0x00) {
  da:	31 11       	cpse	r19, r1
			numOnes = numOnes + 0x01;
  dc:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp7 != 0x00) {
  de:	21 11       	cpse	r18, r1
			numOnes = numOnes + 0x01;
  e0:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp8 != 0x00) {
  e2:	91 11       	cpse	r25, r1
			numOnes = numOnes + 0x01;
  e4:	8f 5f       	subi	r24, 0xFF	; 255
		}
		
		tmp1 = PINB & 0x01;
  e6:	e3 b1       	in	r30, 0x03	; 3
		tmp2 = PINB & 0x02;
  e8:	73 b1       	in	r23, 0x03	; 3
  ea:	72 70       	andi	r23, 0x02	; 2
		tmp3 = PINB & 0x04;
  ec:	63 b1       	in	r22, 0x03	; 3
  ee:	64 70       	andi	r22, 0x04	; 4
		tmp4 = PINB & 0x08;
  f0:	53 b1       	in	r21, 0x03	; 3
  f2:	58 70       	andi	r21, 0x08	; 8
		tmp5 = PINB & 0x10;
  f4:	43 b1       	in	r20, 0x03	; 3
  f6:	40 71       	andi	r20, 0x10	; 16
		tmp6 = PINB & 0x20;
  f8:	33 b1       	in	r19, 0x03	; 3
  fa:	30 72       	andi	r19, 0x20	; 32
		tmp7 = PINB & 0x40;
  fc:	23 b1       	in	r18, 0x03	; 3
  fe:	20 74       	andi	r18, 0x40	; 64
		tmp8 = PINB & 0x80;
 100:	93 b1       	in	r25, 0x03	; 3
 102:	90 78       	andi	r25, 0x80	; 128

		if (tmp1 != 0x00) {
 104:	e0 fd       	sbrc	r30, 0
			numOnes += 0x01;
 106:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp2 != 0x00) {
 108:	71 11       	cpse	r23, r1
			numOnes += 0x01;
 10a:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp3 != 0x00) {
 10c:	61 11       	cpse	r22, r1
			numOnes += 0x01;
 10e:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp4 != 0x00) {
 110:	51 11       	cpse	r21, r1
			numOnes += 0x01;
 112:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp5 != 0x00) {
 114:	41 11       	cpse	r20, r1
			numOnes += 0x01;
 116:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp6 != 0x00) {
 118:	31 11       	cpse	r19, r1
			numOnes += 0x01;
 11a:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp7 != 0x00) {
 11c:	21 11       	cpse	r18, r1
			numOnes += 0x01;
 11e:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp8 != 0x00) {
 120:	91 11       	cpse	r25, r1
			numOnes += 0x01;
 122:	8f 5f       	subi	r24, 0xFF	; 255
		}
		
		PORTC = numOnes;
 124:	88 b9       	out	0x08, r24	; 8
	}
 126:	c2 cf       	rjmp	.-124    	; 0xac <main+0xe>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
