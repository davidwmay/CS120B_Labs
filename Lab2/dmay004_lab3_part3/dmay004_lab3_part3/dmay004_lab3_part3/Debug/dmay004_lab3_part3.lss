
dmay004_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fe  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d2  00000000  00000000  00000b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030a  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009a  00000000  00000000  00001a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	40 c0       	rjmp	.+128    	; 0x11c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	return ((x & (0x01 << k)) != 0);
}


int main() {
	DDRA = 0x00; PORTA = 0xFF; // output, set depending on PORTC values
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; // input, check to find fuel level 
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	18 b8       	out	0x08, r1	; 8
				//light 5-4
				tmpOutput = SetBit(tmpOutput, 5, 1);
				tmpOutput = SetBit(tmpOutput, 4, 1);			
			} else if (PINA >= 1 && PINA <= 15) {
				//light 5
				tmpOutput = SetBit(tmpOutput, 5, 1);
  a8:	20 e6       	ldi	r18, 0x60	; 96
			tmpOutput = SetBit(tmpOutput, 6, 1);
			
			if (PINA >= 3 && PINA <= 15) {
				//light 5-4
				tmpOutput = SetBit(tmpOutput, 5, 1);
				tmpOutput = SetBit(tmpOutput, 4, 1);			
  aa:	90 e7       	ldi	r25, 0x70	; 112
	
		
	while (1) {
		tmpOutput = 0x00;
		
		tmpSeatBelt = PINA & 0x40;
  ac:	80 b1       	in	r24, 0x00	; 0
		tmpIgnition = PINA & 0x10;
  ae:	80 b1       	in	r24, 0x00	; 0
		tmpDriver = PINA & 0x20;
  b0:	80 b1       	in	r24, 0x00	; 0
		
		if (GetBit(tmpIgnition, 0) && GetBit(tmpDriver, 0) && (!GetBit(tmpSeatBelt, 0))) {
			SetBit(tmpOutput, 7, 1);
		}
		
		if (PINA >= 13 && PINA <= 15) {
  b2:	80 b1       	in	r24, 0x00	; 0
  b4:	8d 30       	cpi	r24, 0x0D	; 13
  b6:	18 f0       	brcs	.+6      	; 0xbe <main+0x20>
  b8:	80 b1       	in	r24, 0x00	; 0
  ba:	80 31       	cpi	r24, 0x10	; 16
  bc:	00 f1       	brcs	.+64     	; 0xfe <main+0x60>
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
			tmpOutput = SetBit(tmpOutput, 2, 1);
			tmpOutput = SetBit(tmpOutput, 1, 1);
			tmpOutput = SetBit(tmpOutput, 0, 1);
		} else if (PINA >= 10 && PINA <= 15) {
  be:	80 b1       	in	r24, 0x00	; 0
  c0:	8a 30       	cpi	r24, 0x0A	; 10
  c2:	18 f0       	brcs	.+6      	; 0xca <main+0x2c>
  c4:	80 b1       	in	r24, 0x00	; 0
  c6:	80 31       	cpi	r24, 0x10	; 16
  c8:	e0 f0       	brcs	.+56     	; 0x102 <main+0x64>
			tmpOutput = SetBit(tmpOutput, 5, 1);
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
			tmpOutput = SetBit(tmpOutput, 2, 1);
			tmpOutput = SetBit(tmpOutput, 1, 1);
 		} else if (PINA >= 7 && PINA <= 15) {
  ca:	80 b1       	in	r24, 0x00	; 0
  cc:	87 30       	cpi	r24, 0x07	; 7
  ce:	18 f0       	brcs	.+6      	; 0xd6 <main+0x38>
  d0:	80 b1       	in	r24, 0x00	; 0
  d2:	80 31       	cpi	r24, 0x10	; 16
  d4:	c0 f0       	brcs	.+48     	; 0x106 <main+0x68>
			//light 5-2
			tmpOutput = SetBit(tmpOutput, 5, 1);
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
			tmpOutput = SetBit(tmpOutput, 2, 1);
		} else if (PINA >= 5 && PINA <= 15) {
  d6:	80 b1       	in	r24, 0x00	; 0
  d8:	85 30       	cpi	r24, 0x05	; 5
  da:	18 f0       	brcs	.+6      	; 0xe2 <main+0x44>
  dc:	80 b1       	in	r24, 0x00	; 0
  de:	80 31       	cpi	r24, 0x10	; 16
  e0:	a0 f0       	brcs	.+40     	; 0x10a <main+0x6c>
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
		} else {
			tmpOutput = SetBit(tmpOutput, 6, 1);
			
			if (PINA >= 3 && PINA <= 15) {
  e2:	80 b1       	in	r24, 0x00	; 0
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	18 f0       	brcs	.+6      	; 0xee <main+0x50>
  e8:	80 b1       	in	r24, 0x00	; 0
  ea:	80 31       	cpi	r24, 0x10	; 16
  ec:	80 f0       	brcs	.+32     	; 0x10e <main+0x70>
				//light 5-4
				tmpOutput = SetBit(tmpOutput, 5, 1);
				tmpOutput = SetBit(tmpOutput, 4, 1);			
			} else if (PINA >= 1 && PINA <= 15) {
  ee:	80 b1       	in	r24, 0x00	; 0
  f0:	88 23       	and	r24, r24
  f2:	79 f0       	breq	.+30     	; 0x112 <main+0x74>
  f4:	80 b1       	in	r24, 0x00	; 0
  f6:	80 31       	cpi	r24, 0x10	; 16
  f8:	70 f4       	brcc	.+28     	; 0x116 <main+0x78>
				//light 5
				tmpOutput = SetBit(tmpOutput, 5, 1);
  fa:	82 2f       	mov	r24, r18
  fc:	0d c0       	rjmp	.+26     	; 0x118 <main+0x7a>
			tmpOutput = SetBit(tmpOutput, 5, 1);
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
			tmpOutput = SetBit(tmpOutput, 2, 1);
			tmpOutput = SetBit(tmpOutput, 1, 1);
			tmpOutput = SetBit(tmpOutput, 0, 1);
  fe:	8f e3       	ldi	r24, 0x3F	; 63
 100:	0b c0       	rjmp	.+22     	; 0x118 <main+0x7a>
			//light 5-1
			tmpOutput = SetBit(tmpOutput, 5, 1);
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
			tmpOutput = SetBit(tmpOutput, 2, 1);
			tmpOutput = SetBit(tmpOutput, 1, 1);
 102:	8e e3       	ldi	r24, 0x3E	; 62
 104:	09 c0       	rjmp	.+18     	; 0x118 <main+0x7a>
 		} else if (PINA >= 7 && PINA <= 15) {
			//light 5-2
			tmpOutput = SetBit(tmpOutput, 5, 1);
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
			tmpOutput = SetBit(tmpOutput, 2, 1);
 106:	8c e3       	ldi	r24, 0x3C	; 60
 108:	07 c0       	rjmp	.+14     	; 0x118 <main+0x7a>
		} else if (PINA >= 5 && PINA <= 15) {
			//light 5-3
			tmpOutput = SetBit(tmpOutput, 5, 1);
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
 10a:	88 e3       	ldi	r24, 0x38	; 56
 10c:	05 c0       	rjmp	.+10     	; 0x118 <main+0x7a>
			tmpOutput = SetBit(tmpOutput, 6, 1);
			
			if (PINA >= 3 && PINA <= 15) {
				//light 5-4
				tmpOutput = SetBit(tmpOutput, 5, 1);
				tmpOutput = SetBit(tmpOutput, 4, 1);			
 10e:	89 2f       	mov	r24, r25
 110:	03 c0       	rjmp	.+6      	; 0x118 <main+0x7a>
			//light 5-3
			tmpOutput = SetBit(tmpOutput, 5, 1);
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
		} else {
			tmpOutput = SetBit(tmpOutput, 6, 1);
 112:	80 e4       	ldi	r24, 0x40	; 64
 114:	01 c0       	rjmp	.+2      	; 0x118 <main+0x7a>
 116:	80 e4       	ldi	r24, 0x40	; 64
				tmpOutput = SetBit(tmpOutput, 5, 1);
			}
			
		}
		
		PORTC = tmpOutput;
 118:	88 b9       	out	0x08, r24	; 8
	}
 11a:	c8 cf       	rjmp	.-112    	; 0xac <main+0xe>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
