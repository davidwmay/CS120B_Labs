
dmay004_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a1d  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000833  00000000  00000000  00000c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000300  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001750  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000449  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000251  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001e2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	35 c0       	rjmp	.+106    	; 0x106 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	return ((x & (0x01 << k)) != 0);
}


int main() {
	DDRA = 0x00; PORTA = 0xFF; // input
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; // output
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	18 b8       	out	0x08, r1	; 8
	unsigned char tmpIgnition = 0x00;
	unsigned char tmpDriver = 0x00;
	
		
	while (1) {
		tmpOutput = 0x00;
  a8:	30 e0       	ldi	r19, 0x00	; 0
		tmpIgnition = PINA & 0x10;
		tmpDriver = PINA & 0x20;

		if (tmpSeatBelt == 0x00) {
			if ((tmpIgnition != 0x00) && (tmpDriver != 0x00)) {
				tmpOutput = SetBit(tmpOutput, 7, 1);
  aa:	40 e8       	ldi	r20, 0x80	; 128
	unsigned char tmpDriver = 0x00;
	
		
	while (1) {
		tmpOutput = 0x00;
		tmpSeatBelt = PINA & 0x40;
  ac:	80 b1       	in	r24, 0x00	; 0
		tmpIgnition = PINA & 0x10;
  ae:	90 b1       	in	r25, 0x00	; 0
		tmpDriver = PINA & 0x20;
  b0:	20 b1       	in	r18, 0x00	; 0

		if (tmpSeatBelt == 0x00) {
  b2:	86 fd       	sbrc	r24, 6
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <main+0x24>
			if ((tmpIgnition != 0x00) && (tmpDriver != 0x00)) {
  b6:	94 ff       	sbrs	r25, 4
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <main+0x28>
  ba:	25 ff       	sbrs	r18, 5
  bc:	06 c0       	rjmp	.+12     	; 0xca <main+0x2c>
				tmpOutput = SetBit(tmpOutput, 7, 1);
  be:	94 2f       	mov	r25, r20
  c0:	05 c0       	rjmp	.+10     	; 0xcc <main+0x2e>
	unsigned char tmpIgnition = 0x00;
	unsigned char tmpDriver = 0x00;
	
		
	while (1) {
		tmpOutput = 0x00;
  c2:	93 2f       	mov	r25, r19
  c4:	03 c0       	rjmp	.+6      	; 0xcc <main+0x2e>
  c6:	93 2f       	mov	r25, r19
  c8:	01 c0       	rjmp	.+2      	; 0xcc <main+0x2e>
  ca:	93 2f       	mov	r25, r19
			if ((tmpIgnition != 0x00) && (tmpDriver != 0x00)) {
				tmpOutput = SetBit(tmpOutput, 7, 1);
			}
		}
		
		tmpInput = 0x0F & PINA;
  cc:	80 b1       	in	r24, 0x00	; 0
  ce:	8f 70       	andi	r24, 0x0F	; 15
		
		if (tmpInput >= 13) {
  d0:	8d 30       	cpi	r24, 0x0D	; 13
  d2:	10 f0       	brcs	.+4      	; 0xd8 <main+0x3a>
 */

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  d4:	9f 63       	ori	r25, 0x3F	; 63
  d6:	15 c0       	rjmp	.+42     	; 0x102 <main+0x64>
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
			tmpOutput = SetBit(tmpOutput, 2, 1);
			tmpOutput = SetBit(tmpOutput, 1, 1);
			tmpOutput = SetBit(tmpOutput, 0, 1);
		} else if (tmpInput >= 10) {
  d8:	8a 30       	cpi	r24, 0x0A	; 10
  da:	10 f0       	brcs	.+4      	; 0xe0 <main+0x42>
 */

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  dc:	9e 63       	ori	r25, 0x3E	; 62
  de:	11 c0       	rjmp	.+34     	; 0x102 <main+0x64>
			tmpOutput = SetBit(tmpOutput, 5, 1);
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
			tmpOutput = SetBit(tmpOutput, 2, 1);
			tmpOutput = SetBit(tmpOutput, 1, 1);
		} else if (tmpInput >= 7) {
  e0:	87 30       	cpi	r24, 0x07	; 7
  e2:	10 f0       	brcs	.+4      	; 0xe8 <main+0x4a>
 */

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  e4:	9c 63       	ori	r25, 0x3C	; 60
  e6:	0d c0       	rjmp	.+26     	; 0x102 <main+0x64>
			//light 5-2
			tmpOutput = SetBit(tmpOutput, 5, 1);
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
			tmpOutput = SetBit(tmpOutput, 2, 1);
		} else if (tmpInput >= 5) {
  e8:	85 30       	cpi	r24, 0x05	; 5
  ea:	10 f0       	brcs	.+4      	; 0xf0 <main+0x52>
 */

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  ec:	98 63       	ori	r25, 0x38	; 56
  ee:	09 c0       	rjmp	.+18     	; 0x102 <main+0x64>
			tmpOutput = SetBit(tmpOutput, 4, 1);
			tmpOutput = SetBit(tmpOutput, 3, 1);
		} else if (tmpInput <= 4) {
			//light 5-4 + 6
			tmpOutput = SetBit(tmpOutput, 6, 1);
			if (tmpInput >= 3) {
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	10 f0       	brcs	.+4      	; 0xf8 <main+0x5a>
 */

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  f4:	90 67       	ori	r25, 0x70	; 112
  f6:	05 c0       	rjmp	.+10     	; 0x102 <main+0x64>
			//light 5-4 + 6
			tmpOutput = SetBit(tmpOutput, 6, 1);
			if (tmpInput >= 3) {
				tmpOutput = SetBit(tmpOutput, 5, 1);
				tmpOutput = SetBit(tmpOutput, 4, 1);
			} else if (tmpInput >= 1) {
  f8:	81 11       	cpse	r24, r1
  fa:	02 c0       	rjmp	.+4      	; 0x100 <main+0x62>
 */

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  fc:	90 64       	ori	r25, 0x40	; 64
  fe:	01 c0       	rjmp	.+2      	; 0x102 <main+0x64>
 100:	90 66       	ori	r25, 0x60	; 96
				tmpOutput = SetBit(tmpOutput, 4, 1);
			} else if (tmpInput >= 1) {
				tmpOutput = SetBit(tmpOutput, 5, 1);
			}
		}
		PORTC = tmpOutput;
 102:	98 b9       	out	0x08, r25	; 8
	}
 104:	d3 cf       	rjmp	.-90     	; 0xac <main+0xe>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
