
dmay004_ewong012_lab5_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000836  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078b  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002dc  00000000  00000000  000012ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000019b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	b4 c0       	rjmp	.+360    	; 0x204 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
 *	code, is my own original work.
 */

#include <avr/io.h>

int main(void) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = 0xFF; PORTA = 0x00;
  a8:	81 e2       	ldi	r24, 0x21	; 33
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
  b2:	82 e2       	ldi	r24, 0x22	; 34
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
	DDRC = 0x00; PORTC = 0xFF;
  ba:	87 e2       	ldi	r24, 0x27	; 39
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	10 82       	st	Z, r1
  c2:	88 e2       	ldi	r24, 0x28	; 40
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
	
	unsigned char inputA = 0x00;
  cc:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char outputC = 0x00;
  ce:	19 82       	std	Y+1, r1	; 0x01
	
	while(1) {
		
		inputA = ~PINA;
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	80 95       	com	r24
  da:	8a 83       	std	Y+2, r24	; 0x02
		
		if((inputA & 0x0F) == 0x00) {
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	88 2f       	mov	r24, r24
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	99 27       	eor	r25, r25
  e6:	89 2b       	or	r24, r25
  e8:	19 f4       	brne	.+6      	; 0xf0 <main+0x52>
			outputC = 0x40;
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	89 83       	std	Y+1, r24	; 0x01
  ee:	7a c0       	rjmp	.+244    	; 0x1e4 <main+0x146>
		}
		
		else if((inputA & 0x0F) == 0x01 || (inputA & 0x0F) == 0x02) {
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	88 2f       	mov	r24, r24
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	99 27       	eor	r25, r25
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	39 f0       	breq	.+14     	; 0x10c <main+0x6e>
  fe:	8a 81       	ldd	r24, Y+2	; 0x02
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	99 27       	eor	r25, r25
 108:	02 97       	sbiw	r24, 0x02	; 2
 10a:	19 f4       	brne	.+6      	; 0x112 <main+0x74>
			outputC = 0x60;
 10c:	80 e6       	ldi	r24, 0x60	; 96
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	69 c0       	rjmp	.+210    	; 0x1e4 <main+0x146>
		}
		                           
		else if((inputA & 0x0F)== 0x03 || (inputA & 0x0F) == 0x04) {
 112:	8a 81       	ldd	r24, Y+2	; 0x02
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	99 27       	eor	r25, r25
 11c:	03 97       	sbiw	r24, 0x03	; 3
 11e:	39 f0       	breq	.+14     	; 0x12e <main+0x90>
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	8f 70       	andi	r24, 0x0F	; 15
 128:	99 27       	eor	r25, r25
 12a:	04 97       	sbiw	r24, 0x04	; 4
 12c:	19 f4       	brne	.+6      	; 0x134 <main+0x96>
			outputC = 0x70;
 12e:	80 e7       	ldi	r24, 0x70	; 112
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	58 c0       	rjmp	.+176    	; 0x1e4 <main+0x146>
		}
		
		else if((inputA & 0x0F) == 0x05 || (inputA & 0x0F) == 0x06) {
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	8f 70       	andi	r24, 0x0F	; 15
 13c:	99 27       	eor	r25, r25
 13e:	05 97       	sbiw	r24, 0x05	; 5
 140:	39 f0       	breq	.+14     	; 0x150 <main+0xb2>
 142:	8a 81       	ldd	r24, Y+2	; 0x02
 144:	88 2f       	mov	r24, r24
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	99 27       	eor	r25, r25
 14c:	06 97       	sbiw	r24, 0x06	; 6
 14e:	19 f4       	brne	.+6      	; 0x156 <main+0xb8>
			outputC = 0x38;
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	89 83       	std	Y+1, r24	; 0x01
 154:	47 c0       	rjmp	.+142    	; 0x1e4 <main+0x146>
		}
		
		else if((inputA & 0x0F) == 0x07 || (inputA & 0x0F) == 0x08 || (inputA & 0x0F) == 0x09) {
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	99 27       	eor	r25, r25
 160:	07 97       	sbiw	r24, 0x07	; 7
 162:	71 f0       	breq	.+28     	; 0x180 <main+0xe2>
 164:	8a 81       	ldd	r24, Y+2	; 0x02
 166:	88 2f       	mov	r24, r24
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	99 27       	eor	r25, r25
 16e:	08 97       	sbiw	r24, 0x08	; 8
 170:	39 f0       	breq	.+14     	; 0x180 <main+0xe2>
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	99 27       	eor	r25, r25
 17c:	09 97       	sbiw	r24, 0x09	; 9
 17e:	19 f4       	brne	.+6      	; 0x186 <main+0xe8>
			outputC = 0x3C;
 180:	8c e3       	ldi	r24, 0x3C	; 60
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	2f c0       	rjmp	.+94     	; 0x1e4 <main+0x146>
		}
		
		else if((inputA & 0x0F) == 0x0A || (inputA & 0x0F) == 0x0B || (inputA & 0x0F) == 0x0C) {
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	99 27       	eor	r25, r25
 190:	0a 97       	sbiw	r24, 0x0a	; 10
 192:	71 f0       	breq	.+28     	; 0x1b0 <main+0x112>
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	88 2f       	mov	r24, r24
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	8f 70       	andi	r24, 0x0F	; 15
 19c:	99 27       	eor	r25, r25
 19e:	0b 97       	sbiw	r24, 0x0b	; 11
 1a0:	39 f0       	breq	.+14     	; 0x1b0 <main+0x112>
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	88 2f       	mov	r24, r24
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	99 27       	eor	r25, r25
 1ac:	0c 97       	sbiw	r24, 0x0c	; 12
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <main+0x118>
			outputC = 0x03E;
 1b0:	8e e3       	ldi	r24, 0x3E	; 62
 1b2:	89 83       	std	Y+1, r24	; 0x01
 1b4:	17 c0       	rjmp	.+46     	; 0x1e4 <main+0x146>
		}
		
		else if((inputA & 0x0F) == 0x0D || (inputA & 0x0F) == 0x0E || (inputA & 0x0F) == 0x0F) {
 1b6:	8a 81       	ldd	r24, Y+2	; 0x02
 1b8:	88 2f       	mov	r24, r24
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	99 27       	eor	r25, r25
 1c0:	0d 97       	sbiw	r24, 0x0d	; 13
 1c2:	71 f0       	breq	.+28     	; 0x1e0 <main+0x142>
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	88 2f       	mov	r24, r24
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	8f 70       	andi	r24, 0x0F	; 15
 1cc:	99 27       	eor	r25, r25
 1ce:	0e 97       	sbiw	r24, 0x0e	; 14
 1d0:	39 f0       	breq	.+14     	; 0x1e0 <main+0x142>
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	88 2f       	mov	r24, r24
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	8f 70       	andi	r24, 0x0F	; 15
 1da:	99 27       	eor	r25, r25
 1dc:	0f 97       	sbiw	r24, 0x0f	; 15
 1de:	11 f4       	brne	.+4      	; 0x1e4 <main+0x146>
			outputC = 0x3F;
 1e0:	8f e3       	ldi	r24, 0x3F	; 63
 1e2:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if((inputA & 0xF0) == 0x30) {
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	88 2f       	mov	r24, r24
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	80 7f       	andi	r24, 0xF0	; 240
 1ec:	99 27       	eor	r25, r25
 1ee:	c0 97       	sbiw	r24, 0x30	; 48
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <main+0x15a>
			outputC = outputC | 0x80;
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	80 68       	ori	r24, 0x80	; 128
 1f6:	89 83       	std	Y+1, r24	; 0x01
		}
		
		PORTC = outputC;
 1f8:	88 e2       	ldi	r24, 0x28	; 40
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	29 81       	ldd	r18, Y+1	; 0x01
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
	}
 202:	66 cf       	rjmp	.-308    	; 0xd0 <main+0x32>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
