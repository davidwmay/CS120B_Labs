
dmay004_ewong012_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000904  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f1  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c5  00000000  00000000  000016c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000442  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001f49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	52 c0       	rjmp	.+164    	; 0xaa <__bad_interrupt>
   6:	00 00       	nop
   8:	50 c0       	rjmp	.+160    	; 0xaa <__bad_interrupt>
   a:	00 00       	nop
   c:	4e c0       	rjmp	.+156    	; 0xaa <__bad_interrupt>
   e:	00 00       	nop
  10:	4c c0       	rjmp	.+152    	; 0xaa <__bad_interrupt>
  12:	00 00       	nop
  14:	4a c0       	rjmp	.+148    	; 0xaa <__bad_interrupt>
  16:	00 00       	nop
  18:	48 c0       	rjmp	.+144    	; 0xaa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	46 c0       	rjmp	.+140    	; 0xaa <__bad_interrupt>
  1e:	00 00       	nop
  20:	44 c0       	rjmp	.+136    	; 0xaa <__bad_interrupt>
  22:	00 00       	nop
  24:	42 c0       	rjmp	.+132    	; 0xaa <__bad_interrupt>
  26:	00 00       	nop
  28:	40 c0       	rjmp	.+128    	; 0xaa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3e c0       	rjmp	.+124    	; 0xaa <__bad_interrupt>
  2e:	00 00       	nop
  30:	3c c0       	rjmp	.+120    	; 0xaa <__bad_interrupt>
  32:	00 00       	nop
  34:	3a c0       	rjmp	.+116    	; 0xaa <__bad_interrupt>
  36:	00 00       	nop
  38:	38 c0       	rjmp	.+112    	; 0xaa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	36 c0       	rjmp	.+108    	; 0xaa <__bad_interrupt>
  3e:	00 00       	nop
  40:	34 c0       	rjmp	.+104    	; 0xaa <__bad_interrupt>
  42:	00 00       	nop
  44:	32 c0       	rjmp	.+100    	; 0xaa <__bad_interrupt>
  46:	00 00       	nop
  48:	30 c0       	rjmp	.+96     	; 0xaa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2e c0       	rjmp	.+92     	; 0xaa <__bad_interrupt>
  4e:	00 00       	nop
  50:	2c c0       	rjmp	.+88     	; 0xaa <__bad_interrupt>
  52:	00 00       	nop
  54:	2a c0       	rjmp	.+84     	; 0xaa <__bad_interrupt>
  56:	00 00       	nop
  58:	28 c0       	rjmp	.+80     	; 0xaa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	26 c0       	rjmp	.+76     	; 0xaa <__bad_interrupt>
  5e:	00 00       	nop
  60:	24 c0       	rjmp	.+72     	; 0xaa <__bad_interrupt>
  62:	00 00       	nop
  64:	22 c0       	rjmp	.+68     	; 0xaa <__bad_interrupt>
  66:	00 00       	nop
  68:	20 c0       	rjmp	.+64     	; 0xaa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1e c0       	rjmp	.+60     	; 0xaa <__bad_interrupt>
  6e:	00 00       	nop
  70:	1c c0       	rjmp	.+56     	; 0xaa <__bad_interrupt>
  72:	00 00       	nop
  74:	1a c0       	rjmp	.+52     	; 0xaa <__bad_interrupt>
  76:	00 00       	nop
  78:	18 c0       	rjmp	.+48     	; 0xaa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	16 c0       	rjmp	.+44     	; 0xaa <__bad_interrupt>
  7e:	00 00       	nop
  80:	14 c0       	rjmp	.+40     	; 0xaa <__bad_interrupt>
  82:	00 00       	nop
  84:	12 c0       	rjmp	.+36     	; 0xaa <__bad_interrupt>
  86:	00 00       	nop
  88:	10 c0       	rjmp	.+32     	; 0xaa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8a 00       	.word	0x008a	; ????
  8e:	94 00       	.word	0x0094	; ????
  90:	af 00       	.word	0x00af	; ????
  92:	c5 00       	.word	0x00c5	; ????
  94:	db 00       	.word	0x00db	; ????
  96:	e4 00       	.word	0x00e4	; ????
  98:	e7 00       	.word	0x00e7	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	02 d0       	rcall	.+4      	; 0xac <main>
  a8:	1f c2       	rjmp	.+1086   	; 0x4e8 <_exit>

000000aa <__bad_interrupt>:
  aa:	aa cf       	rjmp	.-172    	; 0x0 <__vectors>

000000ac <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	61 97       	sbiw	r28, 0x11	; 17
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	f8 94       	cli
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	0f be       	out	0x3f, r0	; 63
  be:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0x00; PORTC = 0xFF;
  c0:	87 e2       	ldi	r24, 0x27	; 39
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	fc 01       	movw	r30, r24
  c6:	10 82       	st	Z, r1
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	DDRA = 0xFF; PORTA = 0x00;
  d2:	81 e2       	ldi	r24, 0x21	; 33
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
  dc:	82 e2       	ldi	r24, 0x22	; 34
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	fc 01       	movw	r30, r24
  e2:	10 82       	st	Z, r1
	
	unsigned char inputA = 0x00;
  e4:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char outputC = 0x00;
  e6:	19 82       	std	Y+1, r1	; 0x01
	unsigned char state = 0;
  e8:	1a 82       	std	Y+2, r1	; 0x02
	
	while (1)
	{
		switch(state) {
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	88 2f       	mov	r24, r24
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	09 2e       	mov	r0, r25
  f2:	00 0c       	add	r0, r0
  f4:	aa 0b       	sbc	r26, r26
  f6:	bb 0b       	sbc	r27, r27
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	26 e0       	ldi	r18, 0x06	; 6
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	84 1b       	sub	r24, r20
 102:	95 0b       	sbc	r25, r21
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	08 f4       	brcc	.+2      	; 0x10c <main+0x60>
 10a:	d0 c0       	rjmp	.+416    	; 0x2ac <main+0x200>
 10c:	8a 5b       	subi	r24, 0xBA	; 186
 10e:	9f 4f       	sbci	r25, 0xFF	; 255
 110:	fc 01       	movw	r30, r24
 112:	e1 c1       	rjmp	.+962    	; 0x4d6 <__tablejump2__>
			case 0:
			outputC = 0x07;
 114:	87 e0       	ldi	r24, 0x07	; 7
 116:	89 83       	std	Y+1, r24	; 0x01
			PORTA = outputC;
 118:	82 e2       	ldi	r24, 0x22	; 34
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	29 81       	ldd	r18, Y+1	; 0x01
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
			state = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	8a 83       	std	Y+2, r24	; 0x02
			break;
 126:	ca c0       	rjmp	.+404    	; 0x2bc <main+0x210>
			case 1:
			inputA = ~PINC;
 128:	86 e2       	ldi	r24, 0x26	; 38
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	80 95       	com	r24
 132:	8b 83       	std	Y+3, r24	; 0x03
			if(inputA == 0x01) { //pin 0 high
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	19 f4       	brne	.+6      	; 0x140 <main+0x94>
				state = 2;
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	8a 83       	std	Y+2, r24	; 0x02
				state = 4;
			}
			else {
				state = 5;
			}
			break;
 13e:	be c0       	rjmp	.+380    	; 0x2bc <main+0x210>
			case 1:
			inputA = ~PINC;
			if(inputA == 0x01) { //pin 0 high
				state = 2;
			}
			else if(inputA == 0x02) { //pin 1 high
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	19 f4       	brne	.+6      	; 0x14c <main+0xa0>
				state = 3;
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	8a 83       	std	Y+2, r24	; 0x02
				state = 4;
			}
			else {
				state = 5;
			}
			break;
 14a:	b8 c0       	rjmp	.+368    	; 0x2bc <main+0x210>
				state = 2;
			}
			else if(inputA == 0x02) { //pin 1 high
				state = 3;
			}
			else if(inputA == 0x03) { //pin 1 and 0 high
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	19 f4       	brne	.+6      	; 0x158 <main+0xac>
				state = 4;
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	8a 83       	std	Y+2, r24	; 0x02
			}
			else {
				state = 5;
			}
			break;
 156:	b2 c0       	rjmp	.+356    	; 0x2bc <main+0x210>
			}
			else if(inputA == 0x03) { //pin 1 and 0 high
				state = 4;
			}
			else {
				state = 5;
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	8a 83       	std	Y+2, r24	; 0x02
			}
			break;
 15c:	af c0       	rjmp	.+350    	; 0x2bc <main+0x210>
			case 2:
			if(outputC != 0x09) {
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	89 30       	cpi	r24, 0x09	; 9
 162:	59 f0       	breq	.+22     	; 0x17a <main+0xce>
				++outputC;
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	89 83       	std	Y+1, r24	; 0x01
				PORTA = outputC;
 16a:	82 e2       	ldi	r24, 0x22	; 34
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	29 81       	ldd	r18, Y+1	; 0x01
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
				state = 6;
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	8a 83       	std	Y+2, r24	; 0x02
			}
			else {
				PORTA = outputC;
				state = 6;
			}
			break;
 178:	a1 c0       	rjmp	.+322    	; 0x2bc <main+0x210>
				++outputC;
				PORTA = outputC;
				state = 6;
			}
			else {
				PORTA = outputC;
 17a:	82 e2       	ldi	r24, 0x22	; 34
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	29 81       	ldd	r18, Y+1	; 0x01
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
				state = 6;
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	8a 83       	std	Y+2, r24	; 0x02
			}
			break;
 188:	99 c0       	rjmp	.+306    	; 0x2bc <main+0x210>
			case 3:
			if(outputC != 0x00) {
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	88 23       	and	r24, r24
 18e:	59 f0       	breq	.+22     	; 0x1a6 <main+0xfa>
				--outputC;
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	81 50       	subi	r24, 0x01	; 1
 194:	89 83       	std	Y+1, r24	; 0x01
				PORTA = outputC;
 196:	82 e2       	ldi	r24, 0x22	; 34
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	29 81       	ldd	r18, Y+1	; 0x01
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
				state = 6;
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	8a 83       	std	Y+2, r24	; 0x02
			}
			else {
				PORTA = outputC;
				state = 6;
			}
			break;
 1a4:	8b c0       	rjmp	.+278    	; 0x2bc <main+0x210>
				--outputC;
				PORTA = outputC;
				state = 6;
			}
			else {
				PORTA = outputC;
 1a6:	82 e2       	ldi	r24, 0x22	; 34
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	29 81       	ldd	r18, Y+1	; 0x01
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
				state = 6;
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	8a 83       	std	Y+2, r24	; 0x02
			}
			break;
 1b4:	83 c0       	rjmp	.+262    	; 0x2bc <main+0x210>
			case 4:
			outputC = 0;
 1b6:	19 82       	std	Y+1, r1	; 0x01
			PORTA = outputC;
 1b8:	82 e2       	ldi	r24, 0x22	; 34
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	29 81       	ldd	r18, Y+1	; 0x01
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
			
			state = 6;
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	8a 83       	std	Y+2, r24	; 0x02
			break;
 1c6:	7a c0       	rjmp	.+244    	; 0x2bc <main+0x210>
			case 5:
			state = 1;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	8a 83       	std	Y+2, r24	; 0x02
			break;
 1cc:	77 c0       	rjmp	.+238    	; 0x2bc <main+0x210>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	aa e7       	ldi	r26, 0x7A	; 122
 1d4:	b4 e4       	ldi	r27, 0x44	; 68
 1d6:	8c 83       	std	Y+4, r24	; 0x04
 1d8:	9d 83       	std	Y+5, r25	; 0x05
 1da:	ae 83       	std	Y+6, r26	; 0x06
 1dc:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	4a e7       	ldi	r20, 0x7A	; 122
 1e4:	53 e4       	ldi	r21, 0x43	; 67
 1e6:	6c 81       	ldd	r22, Y+4	; 0x04
 1e8:	7d 81       	ldd	r23, Y+5	; 0x05
 1ea:	8e 81       	ldd	r24, Y+6	; 0x06
 1ec:	9f 81       	ldd	r25, Y+7	; 0x07
 1ee:	e8 d0       	rcall	.+464    	; 0x3c0 <__mulsf3>
 1f0:	dc 01       	movw	r26, r24
 1f2:	cb 01       	movw	r24, r22
 1f4:	88 87       	std	Y+8, r24	; 0x08
 1f6:	99 87       	std	Y+9, r25	; 0x09
 1f8:	aa 87       	std	Y+10, r26	; 0x0a
 1fa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e8       	ldi	r20, 0x80	; 128
 202:	5f e3       	ldi	r21, 0x3F	; 63
 204:	68 85       	ldd	r22, Y+8	; 0x08
 206:	79 85       	ldd	r23, Y+9	; 0x09
 208:	8a 85       	ldd	r24, Y+10	; 0x0a
 20a:	9b 85       	ldd	r25, Y+11	; 0x0b
 20c:	58 d0       	rcall	.+176    	; 0x2be <__cmpsf2>
 20e:	88 23       	and	r24, r24
 210:	2c f4       	brge	.+10     	; 0x21c <main+0x170>
		__ticks = 1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	9d 87       	std	Y+13, r25	; 0x0d
 218:	8c 87       	std	Y+12, r24	; 0x0c
 21a:	3b c0       	rjmp	.+118    	; 0x292 <main+0x1e6>
	else if (__tmp > 65535)
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	3f ef       	ldi	r19, 0xFF	; 255
 220:	4f e7       	ldi	r20, 0x7F	; 127
 222:	57 e4       	ldi	r21, 0x47	; 71
 224:	68 85       	ldd	r22, Y+8	; 0x08
 226:	79 85       	ldd	r23, Y+9	; 0x09
 228:	8a 85       	ldd	r24, Y+10	; 0x0a
 22a:	9b 85       	ldd	r25, Y+11	; 0x0b
 22c:	c5 d0       	rcall	.+394    	; 0x3b8 <__gesf2>
 22e:	18 16       	cp	r1, r24
 230:	3c f5       	brge	.+78     	; 0x280 <main+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 e2       	ldi	r20, 0x20	; 32
 238:	51 e4       	ldi	r21, 0x41	; 65
 23a:	6c 81       	ldd	r22, Y+4	; 0x04
 23c:	7d 81       	ldd	r23, Y+5	; 0x05
 23e:	8e 81       	ldd	r24, Y+6	; 0x06
 240:	9f 81       	ldd	r25, Y+7	; 0x07
 242:	be d0       	rcall	.+380    	; 0x3c0 <__mulsf3>
 244:	dc 01       	movw	r26, r24
 246:	cb 01       	movw	r24, r22
 248:	bc 01       	movw	r22, r24
 24a:	cd 01       	movw	r24, r26
 24c:	3c d0       	rcall	.+120    	; 0x2c6 <__fixunssfsi>
 24e:	dc 01       	movw	r26, r24
 250:	cb 01       	movw	r24, r22
 252:	9d 87       	std	Y+13, r25	; 0x0d
 254:	8c 87       	std	Y+12, r24	; 0x0c
 256:	0f c0       	rjmp	.+30     	; 0x276 <main+0x1ca>
 258:	89 e1       	ldi	r24, 0x19	; 25
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	9f 87       	std	Y+15, r25	; 0x0f
 25e:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 260:	8e 85       	ldd	r24, Y+14	; 0x0e
 262:	9f 85       	ldd	r25, Y+15	; 0x0f
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x1b8>
 268:	9f 87       	std	Y+15, r25	; 0x0f
 26a:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26c:	8c 85       	ldd	r24, Y+12	; 0x0c
 26e:	9d 85       	ldd	r25, Y+13	; 0x0d
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	9d 87       	std	Y+13, r25	; 0x0d
 274:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 276:	8c 85       	ldd	r24, Y+12	; 0x0c
 278:	9d 85       	ldd	r25, Y+13	; 0x0d
 27a:	89 2b       	or	r24, r25
 27c:	69 f7       	brne	.-38     	; 0x258 <main+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 27e:	13 c0       	rjmp	.+38     	; 0x2a6 <main+0x1fa>
 280:	68 85       	ldd	r22, Y+8	; 0x08
 282:	79 85       	ldd	r23, Y+9	; 0x09
 284:	8a 85       	ldd	r24, Y+10	; 0x0a
 286:	9b 85       	ldd	r25, Y+11	; 0x0b
 288:	1e d0       	rcall	.+60     	; 0x2c6 <__fixunssfsi>
 28a:	dc 01       	movw	r26, r24
 28c:	cb 01       	movw	r24, r22
 28e:	9d 87       	std	Y+13, r25	; 0x0d
 290:	8c 87       	std	Y+12, r24	; 0x0c
 292:	8c 85       	ldd	r24, Y+12	; 0x0c
 294:	9d 85       	ldd	r25, Y+13	; 0x0d
 296:	99 8b       	std	Y+17, r25	; 0x11
 298:	88 8b       	std	Y+16, r24	; 0x10
 29a:	88 89       	ldd	r24, Y+16	; 0x10
 29c:	99 89       	ldd	r25, Y+17	; 0x11
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0x1f2>
 2a2:	99 8b       	std	Y+17, r25	; 0x11
 2a4:	88 8b       	std	Y+16, r24	; 0x10
			case 6:
			_delay_ms(1000);
			state = 1;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	8a 83       	std	Y+2, r24	; 0x02
			break;
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <main+0x210>
			default:
			outputC = 0xFF;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	89 83       	std	Y+1, r24	; 0x01
			PORTA = outputC; //should never be reached
 2b0:	82 e2       	ldi	r24, 0x22	; 34
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	29 81       	ldd	r18, Y+1	; 0x01
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
			break;
 2ba:	00 00       	nop
		}
	}
 2bc:	16 cf       	rjmp	.-468    	; 0xea <main+0x3e>

000002be <__cmpsf2>:
 2be:	2f d0       	rcall	.+94     	; 0x31e <__fp_cmp>
 2c0:	08 f4       	brcc	.+2      	; 0x2c4 <__cmpsf2+0x6>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	08 95       	ret

000002c6 <__fixunssfsi>:
 2c6:	57 d0       	rcall	.+174    	; 0x376 <__fp_splitA>
 2c8:	88 f0       	brcs	.+34     	; 0x2ec <__fixunssfsi+0x26>
 2ca:	9f 57       	subi	r25, 0x7F	; 127
 2cc:	90 f0       	brcs	.+36     	; 0x2f2 <__fixunssfsi+0x2c>
 2ce:	b9 2f       	mov	r27, r25
 2d0:	99 27       	eor	r25, r25
 2d2:	b7 51       	subi	r27, 0x17	; 23
 2d4:	a0 f0       	brcs	.+40     	; 0x2fe <__fixunssfsi+0x38>
 2d6:	d1 f0       	breq	.+52     	; 0x30c <__fixunssfsi+0x46>
 2d8:	66 0f       	add	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	88 1f       	adc	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	1a f0       	brmi	.+6      	; 0x2e8 <__fixunssfsi+0x22>
 2e2:	ba 95       	dec	r27
 2e4:	c9 f7       	brne	.-14     	; 0x2d8 <__fixunssfsi+0x12>
 2e6:	12 c0       	rjmp	.+36     	; 0x30c <__fixunssfsi+0x46>
 2e8:	b1 30       	cpi	r27, 0x01	; 1
 2ea:	81 f0       	breq	.+32     	; 0x30c <__fixunssfsi+0x46>
 2ec:	5e d0       	rcall	.+188    	; 0x3aa <__fp_zero>
 2ee:	b1 e0       	ldi	r27, 0x01	; 1
 2f0:	08 95       	ret
 2f2:	5b c0       	rjmp	.+182    	; 0x3aa <__fp_zero>
 2f4:	67 2f       	mov	r22, r23
 2f6:	78 2f       	mov	r23, r24
 2f8:	88 27       	eor	r24, r24
 2fa:	b8 5f       	subi	r27, 0xF8	; 248
 2fc:	39 f0       	breq	.+14     	; 0x30c <__fixunssfsi+0x46>
 2fe:	b9 3f       	cpi	r27, 0xF9	; 249
 300:	cc f3       	brlt	.-14     	; 0x2f4 <__fixunssfsi+0x2e>
 302:	86 95       	lsr	r24
 304:	77 95       	ror	r23
 306:	67 95       	ror	r22
 308:	b3 95       	inc	r27
 30a:	d9 f7       	brne	.-10     	; 0x302 <__fixunssfsi+0x3c>
 30c:	3e f4       	brtc	.+14     	; 0x31c <__fixunssfsi+0x56>
 30e:	90 95       	com	r25
 310:	80 95       	com	r24
 312:	70 95       	com	r23
 314:	61 95       	neg	r22
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	8f 4f       	sbci	r24, 0xFF	; 255
 31a:	9f 4f       	sbci	r25, 0xFF	; 255
 31c:	08 95       	ret

0000031e <__fp_cmp>:
 31e:	99 0f       	add	r25, r25
 320:	00 08       	sbc	r0, r0
 322:	55 0f       	add	r21, r21
 324:	aa 0b       	sbc	r26, r26
 326:	e0 e8       	ldi	r30, 0x80	; 128
 328:	fe ef       	ldi	r31, 0xFE	; 254
 32a:	16 16       	cp	r1, r22
 32c:	17 06       	cpc	r1, r23
 32e:	e8 07       	cpc	r30, r24
 330:	f9 07       	cpc	r31, r25
 332:	c0 f0       	brcs	.+48     	; 0x364 <__fp_cmp+0x46>
 334:	12 16       	cp	r1, r18
 336:	13 06       	cpc	r1, r19
 338:	e4 07       	cpc	r30, r20
 33a:	f5 07       	cpc	r31, r21
 33c:	98 f0       	brcs	.+38     	; 0x364 <__fp_cmp+0x46>
 33e:	62 1b       	sub	r22, r18
 340:	73 0b       	sbc	r23, r19
 342:	84 0b       	sbc	r24, r20
 344:	95 0b       	sbc	r25, r21
 346:	39 f4       	brne	.+14     	; 0x356 <__fp_cmp+0x38>
 348:	0a 26       	eor	r0, r26
 34a:	61 f0       	breq	.+24     	; 0x364 <__fp_cmp+0x46>
 34c:	23 2b       	or	r18, r19
 34e:	24 2b       	or	r18, r20
 350:	25 2b       	or	r18, r21
 352:	21 f4       	brne	.+8      	; 0x35c <__fp_cmp+0x3e>
 354:	08 95       	ret
 356:	0a 26       	eor	r0, r26
 358:	09 f4       	brne	.+2      	; 0x35c <__fp_cmp+0x3e>
 35a:	a1 40       	sbci	r26, 0x01	; 1
 35c:	a6 95       	lsr	r26
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	81 1d       	adc	r24, r1
 362:	81 1d       	adc	r24, r1
 364:	08 95       	ret

00000366 <__fp_split3>:
 366:	57 fd       	sbrc	r21, 7
 368:	90 58       	subi	r25, 0x80	; 128
 36a:	44 0f       	add	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	59 f0       	breq	.+22     	; 0x386 <__fp_splitA+0x10>
 370:	5f 3f       	cpi	r21, 0xFF	; 255
 372:	71 f0       	breq	.+28     	; 0x390 <__fp_splitA+0x1a>
 374:	47 95       	ror	r20

00000376 <__fp_splitA>:
 376:	88 0f       	add	r24, r24
 378:	97 fb       	bst	r25, 7
 37a:	99 1f       	adc	r25, r25
 37c:	61 f0       	breq	.+24     	; 0x396 <__fp_splitA+0x20>
 37e:	9f 3f       	cpi	r25, 0xFF	; 255
 380:	79 f0       	breq	.+30     	; 0x3a0 <__fp_splitA+0x2a>
 382:	87 95       	ror	r24
 384:	08 95       	ret
 386:	12 16       	cp	r1, r18
 388:	13 06       	cpc	r1, r19
 38a:	14 06       	cpc	r1, r20
 38c:	55 1f       	adc	r21, r21
 38e:	f2 cf       	rjmp	.-28     	; 0x374 <__fp_split3+0xe>
 390:	46 95       	lsr	r20
 392:	f1 df       	rcall	.-30     	; 0x376 <__fp_splitA>
 394:	08 c0       	rjmp	.+16     	; 0x3a6 <__fp_splitA+0x30>
 396:	16 16       	cp	r1, r22
 398:	17 06       	cpc	r1, r23
 39a:	18 06       	cpc	r1, r24
 39c:	99 1f       	adc	r25, r25
 39e:	f1 cf       	rjmp	.-30     	; 0x382 <__fp_splitA+0xc>
 3a0:	86 95       	lsr	r24
 3a2:	71 05       	cpc	r23, r1
 3a4:	61 05       	cpc	r22, r1
 3a6:	08 94       	sec
 3a8:	08 95       	ret

000003aa <__fp_zero>:
 3aa:	e8 94       	clt

000003ac <__fp_szero>:
 3ac:	bb 27       	eor	r27, r27
 3ae:	66 27       	eor	r22, r22
 3b0:	77 27       	eor	r23, r23
 3b2:	cb 01       	movw	r24, r22
 3b4:	97 f9       	bld	r25, 7
 3b6:	08 95       	ret

000003b8 <__gesf2>:
 3b8:	b2 df       	rcall	.-156    	; 0x31e <__fp_cmp>
 3ba:	08 f4       	brcc	.+2      	; 0x3be <__gesf2+0x6>
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	08 95       	ret

000003c0 <__mulsf3>:
 3c0:	0b d0       	rcall	.+22     	; 0x3d8 <__mulsf3x>
 3c2:	78 c0       	rjmp	.+240    	; 0x4b4 <__fp_round>
 3c4:	69 d0       	rcall	.+210    	; 0x498 <__fp_pscA>
 3c6:	28 f0       	brcs	.+10     	; 0x3d2 <__mulsf3+0x12>
 3c8:	6e d0       	rcall	.+220    	; 0x4a6 <__fp_pscB>
 3ca:	18 f0       	brcs	.+6      	; 0x3d2 <__mulsf3+0x12>
 3cc:	95 23       	and	r25, r21
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <__mulsf3+0x12>
 3d0:	5a c0       	rjmp	.+180    	; 0x486 <__fp_inf>
 3d2:	5f c0       	rjmp	.+190    	; 0x492 <__fp_nan>
 3d4:	11 24       	eor	r1, r1
 3d6:	ea cf       	rjmp	.-44     	; 0x3ac <__fp_szero>

000003d8 <__mulsf3x>:
 3d8:	c6 df       	rcall	.-116    	; 0x366 <__fp_split3>
 3da:	a0 f3       	brcs	.-24     	; 0x3c4 <__mulsf3+0x4>

000003dc <__mulsf3_pse>:
 3dc:	95 9f       	mul	r25, r21
 3de:	d1 f3       	breq	.-12     	; 0x3d4 <__mulsf3+0x14>
 3e0:	95 0f       	add	r25, r21
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	55 1f       	adc	r21, r21
 3e6:	62 9f       	mul	r22, r18
 3e8:	f0 01       	movw	r30, r0
 3ea:	72 9f       	mul	r23, r18
 3ec:	bb 27       	eor	r27, r27
 3ee:	f0 0d       	add	r31, r0
 3f0:	b1 1d       	adc	r27, r1
 3f2:	63 9f       	mul	r22, r19
 3f4:	aa 27       	eor	r26, r26
 3f6:	f0 0d       	add	r31, r0
 3f8:	b1 1d       	adc	r27, r1
 3fa:	aa 1f       	adc	r26, r26
 3fc:	64 9f       	mul	r22, r20
 3fe:	66 27       	eor	r22, r22
 400:	b0 0d       	add	r27, r0
 402:	a1 1d       	adc	r26, r1
 404:	66 1f       	adc	r22, r22
 406:	82 9f       	mul	r24, r18
 408:	22 27       	eor	r18, r18
 40a:	b0 0d       	add	r27, r0
 40c:	a1 1d       	adc	r26, r1
 40e:	62 1f       	adc	r22, r18
 410:	73 9f       	mul	r23, r19
 412:	b0 0d       	add	r27, r0
 414:	a1 1d       	adc	r26, r1
 416:	62 1f       	adc	r22, r18
 418:	83 9f       	mul	r24, r19
 41a:	a0 0d       	add	r26, r0
 41c:	61 1d       	adc	r22, r1
 41e:	22 1f       	adc	r18, r18
 420:	74 9f       	mul	r23, r20
 422:	33 27       	eor	r19, r19
 424:	a0 0d       	add	r26, r0
 426:	61 1d       	adc	r22, r1
 428:	23 1f       	adc	r18, r19
 42a:	84 9f       	mul	r24, r20
 42c:	60 0d       	add	r22, r0
 42e:	21 1d       	adc	r18, r1
 430:	82 2f       	mov	r24, r18
 432:	76 2f       	mov	r23, r22
 434:	6a 2f       	mov	r22, r26
 436:	11 24       	eor	r1, r1
 438:	9f 57       	subi	r25, 0x7F	; 127
 43a:	50 40       	sbci	r21, 0x00	; 0
 43c:	8a f0       	brmi	.+34     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 43e:	e1 f0       	breq	.+56     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 440:	88 23       	and	r24, r24
 442:	4a f0       	brmi	.+18     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 444:	ee 0f       	add	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	bb 1f       	adc	r27, r27
 44a:	66 1f       	adc	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	88 1f       	adc	r24, r24
 450:	91 50       	subi	r25, 0x01	; 1
 452:	50 40       	sbci	r21, 0x00	; 0
 454:	a9 f7       	brne	.-22     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 456:	9e 3f       	cpi	r25, 0xFE	; 254
 458:	51 05       	cpc	r21, r1
 45a:	70 f0       	brcs	.+28     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 45c:	14 c0       	rjmp	.+40     	; 0x486 <__fp_inf>
 45e:	a6 cf       	rjmp	.-180    	; 0x3ac <__fp_szero>
 460:	5f 3f       	cpi	r21, 0xFF	; 255
 462:	ec f3       	brlt	.-6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 464:	98 3e       	cpi	r25, 0xE8	; 232
 466:	dc f3       	brlt	.-10     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 468:	86 95       	lsr	r24
 46a:	77 95       	ror	r23
 46c:	67 95       	ror	r22
 46e:	b7 95       	ror	r27
 470:	f7 95       	ror	r31
 472:	e7 95       	ror	r30
 474:	9f 5f       	subi	r25, 0xFF	; 255
 476:	c1 f7       	brne	.-16     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 478:	fe 2b       	or	r31, r30
 47a:	88 0f       	add	r24, r24
 47c:	91 1d       	adc	r25, r1
 47e:	96 95       	lsr	r25
 480:	87 95       	ror	r24
 482:	97 f9       	bld	r25, 7
 484:	08 95       	ret

00000486 <__fp_inf>:
 486:	97 f9       	bld	r25, 7
 488:	9f 67       	ori	r25, 0x7F	; 127
 48a:	80 e8       	ldi	r24, 0x80	; 128
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	08 95       	ret

00000492 <__fp_nan>:
 492:	9f ef       	ldi	r25, 0xFF	; 255
 494:	80 ec       	ldi	r24, 0xC0	; 192
 496:	08 95       	ret

00000498 <__fp_pscA>:
 498:	00 24       	eor	r0, r0
 49a:	0a 94       	dec	r0
 49c:	16 16       	cp	r1, r22
 49e:	17 06       	cpc	r1, r23
 4a0:	18 06       	cpc	r1, r24
 4a2:	09 06       	cpc	r0, r25
 4a4:	08 95       	ret

000004a6 <__fp_pscB>:
 4a6:	00 24       	eor	r0, r0
 4a8:	0a 94       	dec	r0
 4aa:	12 16       	cp	r1, r18
 4ac:	13 06       	cpc	r1, r19
 4ae:	14 06       	cpc	r1, r20
 4b0:	05 06       	cpc	r0, r21
 4b2:	08 95       	ret

000004b4 <__fp_round>:
 4b4:	09 2e       	mov	r0, r25
 4b6:	03 94       	inc	r0
 4b8:	00 0c       	add	r0, r0
 4ba:	11 f4       	brne	.+4      	; 0x4c0 <__fp_round+0xc>
 4bc:	88 23       	and	r24, r24
 4be:	52 f0       	brmi	.+20     	; 0x4d4 <__fp_round+0x20>
 4c0:	bb 0f       	add	r27, r27
 4c2:	40 f4       	brcc	.+16     	; 0x4d4 <__fp_round+0x20>
 4c4:	bf 2b       	or	r27, r31
 4c6:	11 f4       	brne	.+4      	; 0x4cc <__fp_round+0x18>
 4c8:	60 ff       	sbrs	r22, 0
 4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <__fp_round+0x20>
 4cc:	6f 5f       	subi	r22, 0xFF	; 255
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	8f 4f       	sbci	r24, 0xFF	; 255
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	08 95       	ret

000004d6 <__tablejump2__>:
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	00 24       	eor	r0, r0
 4dc:	00 1c       	adc	r0, r0
 4de:	0b be       	out	0x3b, r0	; 59
 4e0:	07 90       	elpm	r0, Z+
 4e2:	f6 91       	elpm	r31, Z
 4e4:	e0 2d       	mov	r30, r0
 4e6:	09 94       	ijmp

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
