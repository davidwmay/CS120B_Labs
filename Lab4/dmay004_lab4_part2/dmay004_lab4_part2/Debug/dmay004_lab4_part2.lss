
dmay004_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e3  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cb  00000000  00000000  00000b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000303  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 30       	cpi	r26, 0x0A	; 10
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	6e d0       	rcall	.+220    	; 0x186 <main>
  aa:	80 c0       	rjmp	.+256    	; 0x1ac <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <sequence>:
unsigned int checkRst = 0;
unsigned int checkRst2 = 0;
unsigned int rstCheck = 0;

void sequence() {
	incCheck = PINA & 0x01;
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	81 70       	andi	r24, 0x01	; 1
  b2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <incCheck>
	decCheck = PINA & 0x02;
  b6:	90 b1       	in	r25, 0x00	; 0
  b8:	92 70       	andi	r25, 0x02	; 2
  ba:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <decCheck>

	switch (state) {
  be:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <state>
  c2:	21 30       	cpi	r18, 0x01	; 1
  c4:	f9 f0       	breq	.+62     	; 0x104 <sequence+0x56>
  c6:	30 f0       	brcs	.+12     	; 0xd4 <sequence+0x26>
  c8:	22 30       	cpi	r18, 0x02	; 2
  ca:	71 f1       	breq	.+92     	; 0x128 <sequence+0x7a>
  cc:	23 30       	cpi	r18, 0x03	; 3
  ce:	09 f4       	brne	.+2      	; 0xd2 <sequence+0x24>
  d0:	49 c0       	rjmp	.+146    	; 0x164 <sequence+0xb6>
  d2:	3a c0       	rjmp	.+116    	; 0x148 <sequence+0x9a>
		case start:
		if (incCheck) {
  d4:	88 23       	and	r24, r24
  d6:	51 f0       	breq	.+20     	; 0xec <sequence+0x3e>
			state = increment;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
			checkRst = 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <checkRst+0x1>
  e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <checkRst>
  ea:	43 c0       	rjmp	.+134    	; 0x172 <sequence+0xc4>
		} else if (decCheck) {
  ec:	99 23       	and	r25, r25
  ee:	e9 f1       	breq	.+122    	; 0x16a <sequence+0xbc>
			state = decrement;
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
			checkRst2 = 1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <checkRst2+0x1>
  fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <checkRst2>
 102:	3c c0       	rjmp	.+120    	; 0x17c <sequence+0xce>
			state = start;
		}
		break;

		case increment:
		if (checkRst2) {
 104:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <checkRst2>
 108:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <checkRst2+0x1>
 10c:	23 2b       	or	r18, r19
 10e:	21 f0       	breq	.+8      	; 0x118 <sequence+0x6a>
			state = reset;
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
 116:	26 c0       	rjmp	.+76     	; 0x164 <sequence+0xb6>
		} else if (incCheck) {
 118:	81 11       	cpse	r24, r1
 11a:	2b c0       	rjmp	.+86     	; 0x172 <sequence+0xc4>
			state = increment;
		} else if (decCheck) {
 11c:	99 23       	and	r25, r25
 11e:	49 f1       	breq	.+82     	; 0x172 <sequence+0xc4>
			state = decrement;
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
 126:	2a c0       	rjmp	.+84     	; 0x17c <sequence+0xce>
		}
		break;

		case decrement:
		if (checkRst) {
 128:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <checkRst>
 12c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <checkRst+0x1>
 130:	23 2b       	or	r18, r19
 132:	21 f0       	breq	.+8      	; 0x13c <sequence+0x8e>
			state = reset;
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
 13a:	14 c0       	rjmp	.+40     	; 0x164 <sequence+0xb6>
		} else if (incCheck) {
 13c:	88 23       	and	r24, r24
 13e:	f1 f0       	breq	.+60     	; 0x17c <sequence+0xce>
			state = increment;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state>
 146:	15 c0       	rjmp	.+42     	; 0x172 <sequence+0xc4>
		case reset:
		state = reset;
		break;
		
		default:
		state = start;
 148:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <state>
		break;
 14c:	0e c0       	rjmp	.+28     	; 0x16a <sequence+0xbc>
		
		case increment:
		if (tmpB == 9) {
			break;
		} else {
			tmpB += 0x01;
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpB>
			break;
 154:	03 c0       	rjmp	.+6      	; 0x15c <sequence+0xae>
		
		case decrement:
		if (tmpB == 0) {
			break;
		} else {
			tmpB -= 0x01;
 156:	81 50       	subi	r24, 0x01	; 1
 158:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpB>
		
		default:
		break;
	}

	PORTB = tmpB;
 15c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tmpB>
 160:	85 b9       	out	0x05, r24	; 5
}
 162:	08 95       	ret
			tmpB -= 0x01;
			break;
		}
		
		case reset:
		tmpB = 0x00;
 164:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tmpB>
		break;
 168:	f9 cf       	rjmp	.-14     	; 0x15c <sequence+0xae>
		break;
	}
	
	switch (state) {
		case start:
		tmpB = 0x07;
 16a:	87 e0       	ldi	r24, 0x07	; 7
 16c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpB>
		break;
 170:	f5 cf       	rjmp	.-22     	; 0x15c <sequence+0xae>
		
		case increment:
		if (tmpB == 9) {
 172:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tmpB>
 176:	89 30       	cpi	r24, 0x09	; 9
 178:	51 f7       	brne	.-44     	; 0x14e <sequence+0xa0>
 17a:	f0 cf       	rjmp	.-32     	; 0x15c <sequence+0xae>
			tmpB += 0x01;
			break;
		}
		
		case decrement:
		if (tmpB == 0) {
 17c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tmpB>
 180:	88 23       	and	r24, r24
 182:	61 f3       	breq	.-40     	; 0x15c <sequence+0xae>
 184:	e8 cf       	rjmp	.-48     	; 0x156 <sequence+0xa8>

00000186 <main>:
}


int main() {
	/* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
 186:	11 b8       	out	0x01, r1	; 1
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 18c:	84 b9       	out	0x04, r24	; 4
 18e:	15 b8       	out	0x05, r1	; 5
	
	tmpB = 0x00;
 190:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tmpB>
	incCheck = 0x00;
 194:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <incCheck>
	decCheck = 0x00;
 198:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <decCheck>
	rstCheck = 0;
 19c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	state = start;
 1a4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <state>
	while (1) {
		sequence();
 1a8:	82 df       	rcall	.-252    	; 0xae <sequence>
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <main+0x22>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
