
dmay004_lab1_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000866  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078e  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000270  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001420  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000410  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	1c c0       	rjmp	.+56     	; 0xd4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>

int main(void)
{
	DDRA = 0x00; PORTA = 0x00;
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xFF; PORTC = 0x00;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	18 b8       	out	0x08, r1	; 8
	unsigned char tmp3 = 0x00;
	unsigned char tmp4 = 0x00;
	unsigned char cntAvail = 0x00;
	
	while(1) {
		cntAvail = 0x00;
  a8:	41 e0       	ldi	r20, 0x01	; 1
		tmp1 = PINA & 0x01;
  aa:	80 b1       	in	r24, 0x00	; 0
		tmp2 = PINA & 0x02;
  ac:	30 b1       	in	r19, 0x00	; 0
		tmp3 = PINA & 0x04;
  ae:	20 b1       	in	r18, 0x00	; 0
  b0:	24 70       	andi	r18, 0x04	; 4
		tmp4 = PINA & 0x08;
  b2:	90 b1       	in	r25, 0x00	; 0
  b4:	98 70       	andi	r25, 0x08	; 8
	unsigned char tmp3 = 0x00;
	unsigned char tmp4 = 0x00;
	unsigned char cntAvail = 0x00;
	
	while(1) {
		cntAvail = 0x00;
  b6:	84 27       	eor	r24, r20
  b8:	81 70       	andi	r24, 0x01	; 1
		tmp3 = PINA & 0x04;
		tmp4 = PINA & 0x08;
		if (tmp1 == 0x00) {
			cntAvail = cntAvail + 0x01;
		}
		if (tmp2 == 0x00) {
  ba:	31 ff       	sbrs	r19, 1
			cntAvail = cntAvail + 0x01;
  bc:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp3 == 0x00) {
  be:	21 11       	cpse	r18, r1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <main+0x26>
			cntAvail = cntAvail + 0x01;
  c2:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (tmp4 == 0x00) {
  c4:	91 11       	cpse	r25, r1
  c6:	01 c0       	rjmp	.+2      	; 0xca <main+0x2c>
			cntAvail = cntAvail + 0x01;
  c8:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (cntAvail == 0x00) {
  ca:	81 11       	cpse	r24, r1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <main+0x32>
			cntAvail = cntAvail + 0x80;
  ce:	80 e8       	ldi	r24, 0x80	; 128
		}
	PORTC = cntAvail;
  d0:	88 b9       	out	0x08, r24	; 8
	}
  d2:	eb cf       	rjmp	.-42     	; 0xaa <main+0xc>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
